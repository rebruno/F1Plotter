from matplotlib import pyplot as plt
import numpy as np
import warnings

from .helper_methods import get_driver_color


import base64
from io import BytesIO


class Plotter():
    def __init__(self, dataquery):
        """
        dataquery is a class that queries Ergast's API and formats the data for this plotter           
        """
        self.dataquery = dataquery

    def get_plot(self):
        fig = plt.figure()
        axe = plt.axes()

        axe.grid(linestyle="--", linewidth=0.5)

        return fig, axe

    def head_to_head_laptime(self, raceID, driverIDList, startLap = 0, endLap = None):
        """
        raceID is a way to identify the race. This depends on how DataFormatter is implemented.
        For this, raceID = (season, round_number)

        driverIDList is a list of driver IDs used in the API, season is a year, round_number is the race number
        
        startLap and endLap can be used to specify a lap window(ex: from lap 15 to 24)

        To be implemented: laps, cutoff, delta_plot
        """

        fig, laptimesAxe = self.get_plot()
        data = self.dataquery 
        lapTimeData = data.get_laps(*raceID, driverIDList, startLap = startLap, endLap = endLap)


        for driver in driverIDList:
            laptimesAxe.scatter(lapTimeData[driver]["lap"], lapTimeData[driver]["laptime"], label=driver)

        laptimesAxe.set_xlabel("Lap number")
        laptimesAxe.set_ylabel("Lap times [s]")
    
        laptimesAxe.set_title("{} {}".format(raceID[0], data.get_racename(raceID)))
        x_min, x_max = laptimesAxe.get_xlim()
        laptimesAxe.set_xticks([i for i in range(round(x_min), round(x_max), 5)])
               

        laptimesAxe.legend()
        return fig, laptimesAxe

    
    def boxplot(self, raceID, driverIDList, startLap = 0, endLap = None, exclude = -1, scatter = True):
        """
        Creates a boxplot of laptimes for drivers provided at a race.

        raceID is a (season, raceNumber) tuple

        Exclude is used to remove slow laps, like those during a safety car or during a pitstop. 
        A good value is 1.05.

        """
        fig, ax = self.get_plot()

        position = 1
        data = self.dataquery
        lapTimeData = data.get_laps(*raceID, driverIDList, startLap = startLap, endLap = endLap)

        processedData = {}

        for driver in driverIDList:
            if driver not in lapTimeData:
                print("Driver {} has no laps. Check driverID or if the driver started the Grand Prix.".format(driver))
                continue
            
            driverLaps = np.array(lapTimeData[driver]["laptime"])
            if exclude > 0:
                b = driverLaps < np.median(driverLaps) * exclude
                driverLaps = driverLaps[b]
            
            processedData[driver] = driverLaps
            if scatter:
                c = get_driver_color(driver)
                x = np.random.normal(position, 0.04, size=len(driverLaps))
                ax.scatter(x, driverLaps, color=c, alpha=0.3, label=driver)

            position += 1



        ax.boxplot(x=processedData.values(), labels=processedData.keys())
        
        ax.set_title("{} {}".format(raceID[0], data.get_racename(raceID)))
        ax.set_xlabel("Drivers")
        ax.set_ylabel("Lap times[s]")
        ax.legend(loc="upper right")
        ax.grid(linestyle="--", linewidth=0.5)
        return fig, ax



    def show(self):
        plt.show()

    @classmethod
    def get_html_embed(cls, fig):
        """
        https://stackoverflow.com/questions/48717794/matplotlib-embed-figures-in-auto-generated-html
        Generates temporary file to then embed it as html.
        Will be used for embedding the plot generated by matplotlib in another project
        """
        tmpfile = BytesIO()
        
        fig.savefig(tmpfile, format='png')
        encoded = base64.b64encode(tmpfile.getvalue()).decode('utf-8')

        html = "<img src = \'data:image/png;base64,{}\'>".format(encoded)

        return html

