from matplotlib import pyplot as plt

import base64
from io import BytesIO

from .APIrequests import *
from .methods import *

class Plotter():

	def __init__(self):
		self.fig = None
		self.axes = None

		self.delta = None

	def set_format(self):
		self.fig.tight_layout()
		self.axe.grid(linestyle="--", linewidth=0.5)
		pass

	def get_plot(self, delta_plot = False):
		self.fig = plt.figure()
		if delta_plot:
			gs = gridspec.GridSpec(2, 1, height_ratios=[3,1])
			self.axe = plt.subplot(gs[0])
			self.delta = plt.subplot(gs[1])
		else:
			self.axe = plt.axes()
			self.delta = None

		self.set_format()
		return self.fig, self.axe

	def head_to_head_laptime(self, driverIDList, season, round_number,
			startLap = 0, endLap = None, laps = 0, cutoff = None, delta_plot = False):
		
		lapTimeData = {}

		fig, laptimesAxe = self.get_plot()

		data = DataFormatter()
		lapTimeData = data.get_laps(season, round_number, driverIDList)
		#plotRequester = data.requester

		for driver in driverIDList:
			x = np.arange(1+startLap, len(lapTimeData[driver])+startLap+1)
			laptimesAxe.scatter(x,lapTimeData[driver], label=driver)


		laptimesAxe.set_xlabel("Lap number")
		laptimesAxe.set_ylabel("Lap times [s]")
		laptimesAxe.legend()
	
		laptimesAxe.set_title("{}".format(data.raceNames[0]))
		
		return self.fig, laptimesAxe, lapTimeData

		def boxplot(driverIDList, season, round_number, startLap = 0, endLap = None, exclude = -1, scatter = True):
			pass


	def get_html_embed(self):
		"""
		https://stackoverflow.com/questions/48717794/matplotlib-embed-figures-in-auto-generated-html
		Generates temporary file to then embed it as html.
		Will be used for embedding the plot generated by matplotlib 
		"""
		tmpfile = BytesIO()
		self.fig.savefig(tmpfile, format='png')
		encoded = base64.b64encode(tmpfile.getvalue()).decode('utf-8')

		html = "<img src = \'data:image/png;base64,{}\'>".format(encoded)

		return html


class DataFormatter:

	def __init__(self):
		self.requester = APIRequester()
		self.lastRequestJSON = None

	def get_laps(self, season, round_number, driverIDList):
		self.lastRequestJSON = None

		plotRequester = self.requester
		plotRequester.race(season, round_number)

		if len(driverIDList) >= 2:
			#Build lapTimeData from list of all drivers
			#This means calling without the driverID and filtering the results
			requestedLaps = plotRequester.get_laps()[0] #Only 1 race is requested so only first index is used
		else:
			#Build it from individual drivers
			#This means using driverID every single time
			requestedLaps = {}
			for driver in driverIDList:
				plotRequester.race(season, round_number)
				plotRequester.driver(driver)
				driverLaps = plotRequester.get_laps()
				requestedLaps[driver] = driverLaps[driver]

		self.lastRequestJSON = plotRequester.reqJSON
		self.raceNames = plotRequester.raceNames

		#plotRequester.reset_variables()

		return requestedLaps

	def get_drivers(self, season = None, round_number = None):
		"""
		If season and round_number are None, then this gets every driver that has ever raced in F1(that is in the database)
		"""

		self.lastRequestJSON = None

		plotRequester = self.requester
		plotRequester.race(season, round_number)
		